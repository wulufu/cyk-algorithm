FILE_NAME = "cfg.txt"


def main():
    input_string = input("Enter a string: ")
    rules = generate_rules()
    result = perform_cyk(input_string, rules)
    print(f'The string {"can" if result else "can't"} be generated by the CFG.')


# Returns a dictionary containing rules generated by lines in the CFG file.
# Each rule is a string mapped to a list of strings. Each line in the file is
# assumed be of the form A -> BC or A -> a, where A, B, and C are non-terminal
# symbols, and a is a terminal symbol.a
def generate_rules():
    rules = {}

    with open(FILE_NAME) as file:
        lines = file.read().splitlines()

    for line in lines:
        line = line.replace(' ', '')
        lhs = line[0]
        rhs = line[3:]

        if lhs in rules:
            rules[lhs].append(rhs)
        else:
            rules[lhs] = [rhs]

    return rules


# Uses the CYK algorithm to determine if the input string can be generated
# by the rules provided. Returns true if it can, and false otherwise.
def perform_cyk(input_string, rules):
    length = len(input_string)
    table = [[set() for _ in range(length)] for _ in range(length)]

    # Generate bottom row using the input string
    for i in range(length):
        for variable in rules:
            if input_string[i] in rules[variable]:
                table[i][i].add(variable)

    # Generate remaining rows using dynamic programming approach
    for num_row in range(1, length):
        for i in range(length - num_row):
            j = i + num_row

            for k in range(num_row):
                result = cross_product(table[i][i + k], table[i + k + 1][j])

                for item in result:
                    for variable in rules:
                        if item in rules[variable]:
                            table[i][j].add(variable)

    # Determine if start variable (lhs of first rule) is in the top slot
    return list(rules.keys())[0] in table[0][length - 1]


# Returns a set containing the cross product of two provided sets of strings.
def cross_product(first_set, second_set):
    result = set()

    for var_first in first_set:
        for var_second in second_set:
            result.add(var_first + var_second)

    return result


if __name__ == "__main__":
    main()
